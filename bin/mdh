#!/usr/bin/env ruby

begin
  require 'rubygems'
rescue LoadError
end

require 'metadata'
require 'optparse'

options = {}
opts = OptionParser.new do |opts|
  opts.banner = "#{$0} [options] filename [filename ...]"

  opts.separator ""
  opts.on("-e", "Extract mdh file"){|p| options[:extract] = true }
  opts.on("-p", "Print metadata to stdout"){|p| options[:print] = true }
  opts.on("-c", "Create mdh file"){|p| options[:create] = true }
  opts.on("-v", "Verbose output to stderr"){|p| Metadata.verbose = true }
  opts.on("-q", "Quiet mode, no error messages"){|p| Metadata.quiet = true }
  opts.on("-s", "Include SHA1 checksum of file"){|p| Metadata.sha1sum = true }
  opts.on("--field FIELDNAME", "Print named metadata field to stdout"){|p|
    (options[:fields] ||= []) << p
  }
  opts.on("-m", "Include MD5 checksum of file"){|p| Metadata.md5sum = true }
  opts.on("--json", "Output JSON instead of YAML"){|p| options[:json] = true }
  opts.on("--charset CHARSET", "Default charset to try"){|p|
    options[:charset] = p
  }
  opts.on("--no-text", "Don't extract text"){|p| Metadata.no_text = true }
  opts.on("--guess-title", "Guess title if there is none"){|p|
    Metadata.guess_title = true
  }
  opts.on("--guess-metadata", "Try to guess title, abstract and citations if there are none"){|p| Metadata.guess_metadata = true }
  opts.on("--dblp", "Try to get DBLP metadata for document"){|p|
    Metadata.use_dblp = true
  }
  opts.on("--citeseer", "Try to get Citeseer metadata for document"){|p|
    Metadata.use_citeseer = true
  }
  opts.on("--name", "Include filename"){|p| Metadata.include_name = true }
  opts.on("--path", "Include pathname"){|p| Metadata.include_path = true }
  opts.on("-V", "Print out version number and exit"){|p|
    puts Metadata::VERSION
    exit!(0)
  }
end

opts.parse!(ARGV)
filenames = ARGV

if filenames.empty?
  puts opts.banner
  exit!(1)
end

filenames.each do |fn|
  if File.exist?(fn)
    if options[:extract]
      f2n = fn.sub(/\.mhd$/, '')
      File.open(fn,'rb'){|f|
        mdh_hd = f.read(3)
        if mdh_hd != "MDH"
          STDERR.puts("Not recognized as an MDH file: #{fn}") unless Metadata.quiet
          exit!(2)
        end
        mdh_v = f.read(1)
        if mdh_v != "\x01" and mdh_v != "\x02"
          STDERR.puts("Unrecognized MDH version: #{mdh_v[0]}") unless Metadata.quiet
          exit!(3)
        end
        mdh_sz = f.read(4).unpack("N")[0]
        if options[:print]
          STDOUT.write(f.read(mdh_sz))
        else
          f.seek(4+mdh_sz)
          File.open(f2n, 'wb'){|f2|
            f2.write(f.read(65536)) until f.eof?
          }
        end
      }
    elsif options[:create]
      File.open(fn+'.mdh','wb'){|f|
        md = fn.to_pn.metadata(nil, options[:charset])
        if options[:json]
          require 'json'
          d = md.to_json
          v = "\x02"
        else
          require 'yaml'
          d = md.to_yaml
          v = "\x01"
        end
        f.write("MDH")
        f.write(v)
        f.write( [d.size].pack("N") )
        f.write(d)
        File.open(fn, 'rb'){|f2|
          f.write(f2.read(1048576)) until f2.eof?
        }
      }
    else
      md = fn.to_pn.metadata(nil, options[:charset])
      if options[:fields]
        d = options[:fields].map{|f|
          md[f]
        }.join("\n") + "\n"
      elsif options[:json]
        require 'json'
        d = md.to_json
      else
        require 'yaml'
        d = md.to_yaml
      end
      STDOUT.write(d)
    end
  elsif not Metadata.quiet
    STDERR.puts("File does not exist: #{fn}")
  end
end
